;; linear search of an array

(:go
    (:fill_mult
        2 1	;; first is size, second is factor decoded
        ;;make array
	((mem rsp 0) <- rsi)
        (rsi <- 1)
        (call allocate 2)

        ;;initialize counters
        (rdi <- rax)
        (rdi += 8)
        (rcx <- (mem rax 0))
	(rdx <- rcx)
	(r8 <- (mem rsp 0))

        :loop
	(cjump rcx = 0 :done :more)

	:more
	(rsi <- rdx)
	(rsi -= rcx)
	(rsi *= r8)
	(rsi *= 2)
	(rsi += 1)
	((mem rdi 0) <- rsi)
	(rcx -= 1)
	(rdi += 8)
	(goto :loop)

	:done
	(return))

	(:contains
		2 0 ;; first is pointer to array, second is int
		
		(rax <- (mem rdi 0))
		(rdi += 8)

		:contains_loop
		(cjump rax = 0 :contains_done :contains_more)
		
		:contains_more
		(rcx <- (mem rdi 0))
		(rcx <- rcx = rsi)
		(rax -= 1)
		(rdi += 8)
		(cjump rcx = 0 :contains_loop :found)
		
		:found
		(rax <- 3)
		(return)
		:contains_done
		(rax <- 1)
		(return))

    (:go
        0 0
        (rdi <- 13)
        (rsi <- 7)
        ((mem rsp -8) <- :fill_ret1)
        (call :fill_mult 2)
        
	:fill_ret1
        (rdi <- rax)
        (rsi <- 43)
	((mem rsp -8) <- :contains_ret1)
	(call :contains 2)
	:contains_ret1

	(rdi <- rax)
	(call print 1)



	;; failure test
	(rdi <- 13)
        (rsi <- 7)
        ((mem rsp -8) <- :fill_ret2)
        (call :fill_mult 2)
        
	:fill_ret2
        (rdi <- rax)
        (rsi <- 5)
	((mem rsp -8) <- :contains_ret2)
	(call :contains 2)
	:contains_ret2

	(rdi <- rax)
	(call print 1)
        (return)))

