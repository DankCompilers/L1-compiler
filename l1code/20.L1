;; add_arrays array

(:go
    (:fill_mult
        2 1	;; first is size, second is factor decoded
        ;;make array
	((mem rsp 0) <- rsi)
        (rsi <- 1)
        (call allocate 2)

        ;;initialize counters
        (rdi <- rax)
        (rdi += 8)
        (rcx <- (mem rax 0))
	(rdx <- rcx)
	(r8 <- (mem rsp 0))

        :loop
	(cjump rcx = 0 :done :more)

	:more
	(rsi <- rdx)
	(rsi -= rcx)
	(rsi *= r8)
	(rsi *= 2)
	(rsi += 1)
	((mem rdi 0) <- rsi)
	(rcx -= 1)
	(rdi += 8)
	(goto :loop)

	:done
	(return))

	(:add_arrays
		2 0 
		(rax <- rdi)
		(rcx <- (mem rdi 0))
		
		;; set rsi to point to first
		(rdi += 8)
		(rsi += 8)

		:add_array_loop1
		(cjump rcx = 0 :add_array_done1 :add_array_more1)
		
		:add_array_more1
		;;add the values
		(r8 <- (mem rsi 0))
		(r8 >>= 1)
		(r9 <- (mem rdi 0))
		(r9 >>= 1)
		(r8 += r9)
		(r8 <<= 1)
		(r8 += 1)
		((mem rdi 0) <- r8)
		(rcx -= 1)
		(rdi += 8)
		(rsi += 8)
		(goto :add_array_loop1)

		:add_array_done1
		(return))

    (:go
        0 0
	(tail-call :test 0)
	(return))

    (:test
	0 2
	((mem rsp 0) <- rbx)
	((mem rsp 8) <- r12)
	;; gen first array
        (rdi <- 13)
        (rsi <- 7)
        ((mem rsp -8) <- :fill_ret1)
        (call :fill_mult 2)
        
	:fill_ret1
	(rdi <- rax)
	(rbx <- rax)
	(call print 1)
	

	;; gen second array
        (rdi <- 13)
        (rsi <- 3)
        ((mem rsp -8) <- :fill_ret2)
        (call :fill_mult 2)
        
	:fill_ret2
	(rdi <- rax)
	(r12 <- rax)
	(call print 1)
	
	(rdi <- rbx)
	(rsi <- r12)
	((mem rsp -8) <- :add_array_ret)
	(call :add_arrays 2)
	
	:add_array_ret
	(rdi <- rax)
	(call print 1)
	(rbx <- (mem rsp 0))
	(r12 <- (mem rsp 8))
        (return)))

